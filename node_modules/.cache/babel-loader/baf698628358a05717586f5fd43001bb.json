{"ast":null,"code":"/**\n * This function is used to combine one or more classNames into one string.\n * Value null or undefined will be ignored.\n * E.g. combineClassNames('foo', 'bar') will return 'foo bar', \n *      combineClassNames('foo', null, 'bar') will also return 'foo bar'.\n * @param {*} classNames \n */\nvar combineClassNames = function combineClassNames() {\n  for (var _len = arguments.length, classNames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classNames[_key] = arguments[_key];\n  }\n\n  if (classNames.length === 0) {\n    return '';\n  }\n\n  var className = '';\n  classNames.forEach(function (cn) {\n    if (cn) {\n      className = \"\".concat(className, \" \").concat(cn);\n    }\n  });\n  return className.trim();\n};\n/**\n * This function is used to remove the unit substring inside a CSS <length>.\n * E.g. getCleanSizeNumber('100px') will return '100', getCleanSizeNumber('200') will return '200'.\n */\n\n\nvar getCleanSizeNumber = function getCleanSizeNumber(numStr) {\n  var regExp = /[a-z]+/i;\n  var newStr = numStr;\n\n  if (regExp.test(newStr)) {\n    var result = regExp.exec(newStr);\n    newStr = newStr.slice(0, result.index);\n  }\n\n  return newStr.trim();\n};\n\nexport { combineClassNames, getCleanSizeNumber };","map":{"version":3,"sources":["C:\\Users\\karan\\my-app1\\src\\Components\\bottomplayer\\buttons\\util-functions.js"],"names":["combineClassNames","classNames","length","className","forEach","cn","trim","getCleanSizeNumber","numStr","regExp","newStr","test","result","exec","slice","index"],"mappings":"AAAA;;;;;;;AAOA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,GAAmB;AAAA,oCAAfC,UAAe;AAAfA,IAAAA,UAAe;AAAA;;AAC3C,MAAIA,UAAU,CAACC,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,WAAO,EAAP;AACD;;AACD,MAAIC,SAAS,GAAG,EAAhB;AACAF,EAAAA,UAAU,CAACG,OAAX,CAAmB,UAACC,EAAD,EAAQ;AACzB,QAAIA,EAAJ,EAAQ;AAAEF,MAAAA,SAAS,aAAMA,SAAN,cAAmBE,EAAnB,CAAT;AAAmC;AAC9C,GAFD;AAGA,SAAOF,SAAS,CAACG,IAAV,EAAP;AACD,CATD;AAWA;;;;;;AAIA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,MAAM,EAAI;AACnC,MAAMC,MAAM,GAAG,SAAf;AACA,MAAIC,MAAM,GAAGF,MAAb;;AACA,MAAIC,MAAM,CAACE,IAAP,CAAYD,MAAZ,CAAJ,EAAyB;AACvB,QAAME,MAAM,GAAGH,MAAM,CAACI,IAAP,CAAYH,MAAZ,CAAf;AACAA,IAAAA,MAAM,GAAGA,MAAM,CAACI,KAAP,CAAa,CAAb,EAAgBF,MAAM,CAACG,KAAvB,CAAT;AACD;;AACD,SAAOL,MAAM,CAACJ,IAAP,EAAP;AACD,CARD;;AAUA,SACEN,iBADF,EAEEO,kBAFF","sourcesContent":["/**\n * This function is used to combine one or more classNames into one string.\n * Value null or undefined will be ignored.\n * E.g. combineClassNames('foo', 'bar') will return 'foo bar', \n *      combineClassNames('foo', null, 'bar') will also return 'foo bar'.\n * @param {*} classNames \n */\nconst combineClassNames = (...classNames) => {\n  if (classNames.length === 0) {\n    return '';\n  }\n  let className = '';\n  classNames.forEach((cn) => {\n    if (cn) { className = `${className} ${cn}`; }\n  });\n  return className.trim();\n};\n\n/**\n * This function is used to remove the unit substring inside a CSS <length>.\n * E.g. getCleanSizeNumber('100px') will return '100', getCleanSizeNumber('200') will return '200'.\n */\nconst getCleanSizeNumber = numStr => {\n  const regExp = /[a-z]+/i;\n  let newStr = numStr;\n  if (regExp.test(newStr)) {\n    const result = regExp.exec(newStr);\n    newStr = newStr.slice(0, result.index);\n  }\n  return newStr.trim();\n};\n\nexport {\n  combineClassNames,\n  getCleanSizeNumber\n};\n"]},"metadata":{},"sourceType":"module"}