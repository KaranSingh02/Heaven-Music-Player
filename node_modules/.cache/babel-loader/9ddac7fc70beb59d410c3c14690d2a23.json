{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\karan\\\\my-app1\\\\src\\\\Components\\\\bottomplayer\\\\HOCAudio.jsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\n\nvar HOCAudio = function HOCAudio(Audio) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(HOCAudioComponent, _React$Component);\n\n    function HOCAudioComponent(props) {\n      var _this;\n\n      _classCallCheck(this, HOCAudioComponent);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(HOCAudioComponent).call(this, props));\n\n      if (!_this.props.playlist || _this.props.playlist.length === 0) {\n        throw new Error('You should provide a playlist which contains at least 1 audio object');\n      }\n\n      if (_this.props.fullPlayer) {\n        _this.props.playlist.forEach(function (song) {\n          if (!song.img) {\n            throw new Error('You should provide song.img when the fullPlayer is enabled.');\n          }\n\n          if (_this.props.comment && !song.comments) {\n            throw new Error('You turned on commenting function and you need to provide the `comments` field for each song in the playlist');\n          }\n        });\n      } // bind methods\n\n\n      _this.playNext = props.autoPlay; // A boolean to determine whether to play the next song or not\n\n      _this.loadSrc = _this.loadSrc.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this.togglePlayPause = _this.togglePlayPause.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this.onCanPlay = _this.onCanPlay.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this.onEnded = _this.onEnded.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this.onPlay = _this.onPlay.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this.onPause = _this.onPause.bind(_assertThisInitialized(_assertThisInitialized(_this))); // this.onTimeUpdate = this.onTimeUpdate.bind(this);\n\n      _this.setVolume = _this.setVolume.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this.setProgress = _this.setProgress.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this.skipToNext = _this.skipToNext.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this.skipToPrevious = _this.skipToPrevious.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this.togglePlayingState = _this.togglePlayingState.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this.playEventHandler = _this.playEventHandler.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this.pauseEventHandler = _this.pauseEventHandler.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this.skipToNextEventHandler = _this.skipToNextEventHandler.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this.skipToPreviousEventHandler = _this.skipToPreviousEventHandler.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      var discardPileSize = Math.ceil(props.playlist.length / 2);\n      _this.state = {\n        playing: false,\n        currentPlaylistPos: 0,\n        playingState: 0,\n        // 0: cycle, 1: repeat, 2: shuffle\n        progress: 0,\n        duration: 0,\n        volume: 1,\n        shuffleState: {\n          size: discardPileSize,\n          drawPile: _toConsumableArray(Array(props.playlist.length).keys()),\n          // initialise full playlist indexes\n          discardPile: []\n        }\n      };\n      return _this;\n    }\n\n    _createClass(HOCAudioComponent, [{\n      key: \"onCanPlay\",\n      value: function onCanPlay() {\n        // console.log('audio oncanplay');\n        this.playNext = this.state.playing;\n        this.setState({\n          duration: this.audioElement.duration\n        });\n      }\n    }, {\n      key: \"onPlay\",\n      value: function onPlay() {\n        var _this2 = this;\n\n        // console.log('audio onplay');\n        this.playNext = true;\n        this.setState({\n          playing: true\n        });\n        this.intervalId = setInterval(function () {\n          _this2.setState({\n            progress: _this2.audioElement.currentTime\n          });\n        }, 900);\n      }\n    }, {\n      key: \"onPause\",\n      value: function onPause() {\n        // console.log('audio onpause');\n        this.setState({\n          playing: false\n        });\n\n        this._clearInterval();\n      }\n    }, {\n      key: \"onEnded\",\n      value: function onEnded() {\n        // console.log('audio onended');\n        if (this.playNext) {\n          this.handleEndedProgress();\n        }\n      } // onTimeUpdate(e) {\n      //   this.setState({ progress: this.audioElement.currentTime });\n      //   console.log(e.target.currentTime);\n      // }\n\n    }, {\n      key: \"handleEndedProgress\",\n      value: function handleEndedProgress() {\n        this.playNext = true;\n\n        switch (this.state.playingState) {\n          case 0:\n            {\n              this.skipToNext();\n              break;\n            }\n\n          case 1:\n            {\n              this.setState({\n                progress: 0\n              });\n              this.audioElement.currentTime = 0;\n              this.togglePlayPause();\n              break;\n            }\n\n          case 2:\n            {\n              var ss = this.state.shuffleState;\n              var currentSongIndex = ss.drawPile.indexOf(this.state.currentPlaylistPos);\n              var newDrawPile = ss.drawPile;\n              var newDiscardPile = ss.discardPile;\n\n              if (currentSongIndex !== -1) {\n                newDrawPile.splice(currentSongIndex, 1);\n                newDiscardPile.push(this.state.currentPlaylistPos);\n              }\n\n              var index = Math.floor(Math.random() * ss.drawPile.length);\n              var sliced = newDrawPile.slice(index, index + 1);\n              this.setState({\n                currentPlaylistPos: sliced[0],\n                shuffleState: {\n                  size: ss.size,\n                  drawPile: newDrawPile,\n                  discardPile: newDiscardPile\n                }\n              });\n\n              if (newDiscardPile.length === ss.size) {\n                var shiftedElement = newDiscardPile.shift();\n                newDrawPile.push(shiftedElement);\n                this.setState({\n                  shuffleState: {\n                    size: ss.size,\n                    drawPile: newDrawPile,\n                    discardPile: newDiscardPile\n                  }\n                });\n              }\n\n              this.loadSrc();\n              break;\n            }\n\n          default:\n            {\n              // console.log('onend BUG!!!');\n              break;\n            }\n        }\n      }\n    }, {\n      key: \"setVolume\",\n      value: function setVolume(volume) {\n        // console.log(`volume is set to ${volume}`);\n        this.audioElement.volume = volume;\n        this.setState({\n          volume: volume\n        });\n      }\n    }, {\n      key: \"setProgress\",\n      value: function setProgress(newProgress) {\n        var progress = newProgress;\n        var duration = this.audioElement.duration;\n\n        if (progress > duration) {\n          progress = duration;\n        }\n\n        this.audioElement.currentTime = progress;\n        this.setState({\n          progress: progress\n        }); // console.log(`progress is set to ${progress}`);\n      }\n    }, {\n      key: \"_clearInterval\",\n      value: function _clearInterval() {\n        // console.log('interval cleared');\n        if (this.intervalId !== null) {\n          clearInterval(this.intervalId);\n          this.intervalId = null;\n        }\n      }\n    }, {\n      key: \"loadSrc\",\n      value: function loadSrc() {\n        // console.log('load src');\n        if (this.state.currentPlaylistPos < this.props.playlist.length) {\n          this.audioElement.src = this.props.playlist[this.state.currentPlaylistPos].src;\n          this.audioElement.load();\n\n          if (this.playNext) {\n            this.audioElement.play();\n          }\n\n          this.setState({\n            progress: 0\n          });\n\n          this._clearInterval();\n        }\n      }\n    }, {\n      key: \"togglePlayPause\",\n      value: function togglePlayPause() {\n        // console.log('toggle playpause');\n        if (this.state.playing) {\n          // console.log('togglePlayPause(): playing');\n          this.audioElement.pause();\n        } else if (this.audioElement.currentTime === this.audioElement.duration) {\n          this.handleEndedProgress();\n        } else {\n          this.audioElement.play();\n        }\n      }\n    }, {\n      key: \"skipToNext\",\n      value: function skipToNext() {\n        // console.log('skip to next');\n        this.state.currentPlaylistPos = this.setCycleNumPos(this.state.currentPlaylistPos, 1, this.props.playlist.length);\n        this.loadSrc();\n      }\n    }, {\n      key: \"skipToPrevious\",\n      value: function skipToPrevious() {\n        // console.log('skip to next');\n        this.state.currentPlaylistPos = this.setCycleNumPos(this.state.currentPlaylistPos, -1, this.props.playlist.length);\n        this.loadSrc();\n      }\n    }, {\n      key: \"togglePlayingState\",\n      value: function togglePlayingState() {\n        this.setState({\n          playingState: this.setCycleNumPos(this.state.playingState, 1, 3)\n        });\n      }\n    }, {\n      key: \"setCycleNumPos\",\n      value: function setCycleNumPos(currentVal, change, length) {\n        var newPos = currentVal + change;\n\n        if (newPos >= length) {\n          newPos -= length;\n        }\n\n        if (newPos < 0) {\n          newPos += length;\n        }\n\n        return newPos;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var newProps = Object.assign({}, {\n          name: this.props.playlist[this.state.currentPlaylistPos].name,\n          CommentsWrapperStates: {\n            songImageSrc: this.props.playlist[this.state.currentPlaylistPos].img,\n            comments: this.props.fullPlayer && this.props.comment ? this.props.playlist[this.state.currentPlaylistPos].comments : null,\n            pos: this.state.currentPlaylistPos\n          },\n          controlStates: {\n            playing: this.state.playing,\n            playingState: this.state.playingState,\n            volume: this.state.volume * 100\n          },\n          controlCallbacks: {\n            setVolume: this.setVolume,\n            togglePlayPause: this.togglePlayPause,\n            togglePlayingState: this.togglePlayingState,\n            skipToNext: this.skipToNext,\n            skipToPrevious: this.skipToPrevious\n          },\n          timelineStates: {\n            playing: this.state.playing,\n            progress: this.state.progress,\n            duration: this.state.duration\n          },\n          timelineCallbacks: {\n            setProgress: this.setProgress,\n            togglePlayPause: this.togglePlayPause\n          },\n          children: this.props.children\n        }, this.props);\n        return React.createElement(Audio, Object.assign({}, newProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251\n          },\n          __self: this\n        }));\n      }\n    }, {\n      key: \"playEventHandler\",\n      value: function playEventHandler() {\n        this.audioElement.play();\n      }\n    }, {\n      key: \"pauseEventHandler\",\n      value: function pauseEventHandler() {\n        this.audioElement.pause();\n      }\n    }, {\n      key: \"skipToNextEventHandler\",\n      value: function skipToNextEventHandler() {\n        this.skipToNext();\n      }\n    }, {\n      key: \"skipToPreviousEventHandler\",\n      value: function skipToPreviousEventHandler() {\n        this.skipToPrevious();\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        // console.log('Audio mounted!');\n        // set audio element event listeners\n        this.audioElement = document.createElement('audio');\n        this.audioElement.addEventListener('canplay', this.onCanPlay);\n        this.audioElement.addEventListener('ended', this.onEnded);\n        this.audioElement.addEventListener('play', this.onPlay);\n        this.audioElement.addEventListener('pause', this.onPause);\n        this.audioElement.addEventListener('volumechange', this.onVolumeChange);\n        this.loadSrc();\n        this.setState({\n          volume: this.audioElement.volume\n        });\n        ReactDOM.findDOMNode(this).addEventListener('audio-play', this.playEventHandler);\n        ReactDOM.findDOMNode(this).addEventListener('audio-pause', this.pauseEventHandler);\n        ReactDOM.findDOMNode(this).addEventListener('audio-skip-to-next', this.skipToNextEventHandler);\n        ReactDOM.findDOMNode(this).addEventListener('audio-skip-to-previous', this.skipToPreviousEventHandler);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this._clearInterval();\n\n        this.audioElement.removeEventListener('canplay', this.onCanPlay);\n        this.audioElement.removeEventListener('ended', this.onEnded);\n        this.audioElement.removeEventListener('play', this.onPlay);\n        this.audioElement.removeEventListener('pause', this.onPause);\n        this.audioElement.removeEventListener('volumechange', this.onVolumeChange);\n        this.audioElement = null;\n        ReactDOM.findDOMNode(this).removeEventListener('audio-play', this.playEventHandler);\n        ReactDOM.findDOMNode(this).removeEventListener('audio-pause', this.pauseEventHandler);\n        ReactDOM.findDOMNode(this).removeEventListener('audio-skip-to-next', this.skipToNextEventHandler);\n        ReactDOM.findDOMNode(this).removeEventListener('audio-skip-to-previous', this.skipToPreviousEventHandler);\n      }\n    }]);\n\n    return HOCAudioComponent;\n  }(React.Component), _class.propTypes = {\n    playlist: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string,\n      src: PropTypes.string,\n      img: PropTypes.string,\n      comments: PropTypes.arrayOf(PropTypes.shape({\n        time: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n        content: PropTypes.string\n      }))\n    })).isRequired\n  }, _temp;\n};\n\nexport default HOCAudio;","map":{"version":3,"sources":["C:\\Users\\karan\\my-app1\\src\\Components\\bottomplayer\\HOCAudio.jsx"],"names":["React","ReactDOM","PropTypes","HOCAudio","Audio","props","playlist","length","Error","fullPlayer","forEach","song","img","comment","comments","playNext","autoPlay","loadSrc","bind","togglePlayPause","onCanPlay","onEnded","onPlay","onPause","setVolume","setProgress","skipToNext","skipToPrevious","togglePlayingState","playEventHandler","pauseEventHandler","skipToNextEventHandler","skipToPreviousEventHandler","discardPileSize","Math","ceil","state","playing","currentPlaylistPos","playingState","progress","duration","volume","shuffleState","size","drawPile","Array","keys","discardPile","setState","audioElement","intervalId","setInterval","currentTime","_clearInterval","handleEndedProgress","ss","currentSongIndex","indexOf","newDrawPile","newDiscardPile","splice","push","index","floor","random","sliced","slice","shiftedElement","shift","newProgress","clearInterval","src","load","play","pause","setCycleNumPos","currentVal","change","newPos","newProps","Object","assign","name","CommentsWrapperStates","songImageSrc","pos","controlStates","controlCallbacks","timelineStates","timelineCallbacks","children","document","createElement","addEventListener","onVolumeChange","findDOMNode","removeEventListener","Component","propTypes","arrayOf","shape","string","time","oneOfType","number","content","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\n\nconst HOCAudio = (Audio) => {\n  return class HOCAudioComponent extends React.Component {\n    static propTypes = {\n      playlist: PropTypes.arrayOf(PropTypes.shape({\n        name: PropTypes.string,\n        src: PropTypes.string,\n        img: PropTypes.string,\n        comments: PropTypes.arrayOf(PropTypes.shape({\n          time: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n          content: PropTypes.string\n        }))\n      })).isRequired\n    };\n    constructor(props) {\n      super(props);\n      if (!this.props.playlist || this.props.playlist.length === 0) {\n        throw new Error('You should provide a playlist which contains at least 1 audio object');\n      }\n      if (this.props.fullPlayer) {\n        this.props.playlist.forEach((song) => {\n          if (!song.img) {\n            throw new Error('You should provide song.img when the fullPlayer is enabled.');\n          }\n          if (this.props.comment && !song.comments) {\n            throw new Error('You turned on commenting function and you need to provide the `comments` field for each song in the playlist');\n          }\n        });\n      }\n\n      // bind methods\n      this.playNext = props.autoPlay; // A boolean to determine whether to play the next song or not\n      this.loadSrc = this.loadSrc.bind(this);\n      this.togglePlayPause = this.togglePlayPause.bind(this);\n      this.onCanPlay = this.onCanPlay.bind(this);\n      this.onEnded = this.onEnded.bind(this);\n      this.onPlay = this.onPlay.bind(this);\n      this.onPause = this.onPause.bind(this);\n      // this.onTimeUpdate = this.onTimeUpdate.bind(this);\n      this.setVolume = this.setVolume.bind(this);\n      this.setProgress = this.setProgress.bind(this);\n      this.skipToNext = this.skipToNext.bind(this);\n      this.skipToPrevious = this.skipToPrevious.bind(this);\n      this.togglePlayingState = this.togglePlayingState.bind(this);\n      this.playEventHandler = this.playEventHandler.bind(this);\n      this.pauseEventHandler = this.pauseEventHandler.bind(this);\n      this.skipToNextEventHandler = this.skipToNextEventHandler.bind(this);\n      this.skipToPreviousEventHandler = this.skipToPreviousEventHandler.bind(this);\n\n      const discardPileSize = Math.ceil(props.playlist.length / 2);\n      this.state = {\n        playing: false,\n        currentPlaylistPos: 0,\n        playingState: 0, // 0: cycle, 1: repeat, 2: shuffle\n        progress: 0,\n        duration: 0,\n        volume: 1,\n        shuffleState: {\n          size: discardPileSize,\n          drawPile: [...Array(props.playlist.length).keys()], // initialise full playlist indexes\n          discardPile: []\n        }\n      };\n    }\n    onCanPlay() {\n      // console.log('audio oncanplay');\n      this.playNext = this.state.playing;\n      this.setState({\n        duration: this.audioElement.duration\n      });\n    }\n    onPlay() {\n      // console.log('audio onplay');\n      this.playNext = true;\n      this.setState({ playing: true });\n      this.intervalId = setInterval(() => {\n        this.setState({ progress: this.audioElement.currentTime });\n      }, 900);\n    }\n    onPause() {\n      // console.log('audio onpause');\n      this.setState({ playing: false });\n      this._clearInterval();\n    }\n    onEnded() {\n      // console.log('audio onended');\n      if (this.playNext) {\n        this.handleEndedProgress();\n      }\n    }\n    // onTimeUpdate(e) {\n    //   this.setState({ progress: this.audioElement.currentTime });\n    //   console.log(e.target.currentTime);\n    // }\n    handleEndedProgress() {\n      this.playNext = true;\n      switch (this.state.playingState) {\n        case 0: {\n          this.skipToNext();\n          break;\n        }\n        case 1: {\n          this.setState({ progress: 0 });\n          this.audioElement.currentTime = 0;\n          this.togglePlayPause();\n          break;\n        }\n        case 2: {\n          const ss = this.state.shuffleState;\n          const currentSongIndex = ss.drawPile.indexOf(this.state.currentPlaylistPos);\n          const newDrawPile = ss.drawPile;\n          const newDiscardPile = ss.discardPile;\n          if (currentSongIndex !== -1) {\n            newDrawPile.splice(currentSongIndex, 1);\n            newDiscardPile.push(this.state.currentPlaylistPos);\n          }\n          const index = Math.floor(Math.random() * ss.drawPile.length);\n          const sliced = newDrawPile.slice(index, index + 1);\n          this.setState({\n            currentPlaylistPos: sliced[0],\n            shuffleState: {\n              size: ss.size,\n              drawPile: newDrawPile,\n              discardPile: newDiscardPile\n            }\n          });\n          if (newDiscardPile.length === ss.size) {\n            const shiftedElement = newDiscardPile.shift();\n            newDrawPile.push(shiftedElement);\n            this.setState({\n              shuffleState: {\n                size: ss.size,\n                drawPile: newDrawPile,\n                discardPile: newDiscardPile\n              }\n            });\n          }\n          this.loadSrc();\n          break;\n        }\n        default: {\n          // console.log('onend BUG!!!');\n          break;\n        }\n      }\n    }\n    setVolume(volume) {\n      // console.log(`volume is set to ${volume}`);\n      this.audioElement.volume = volume;\n      this.setState({ volume });\n    }\n    setProgress(newProgress) {\n      let progress = newProgress;\n      const duration = this.audioElement.duration;\n      if (progress > duration) {\n        progress = duration;\n      }\n      this.audioElement.currentTime = progress;\n      this.setState({ progress });\n      // console.log(`progress is set to ${progress}`);\n    }\n    _clearInterval() {\n      // console.log('interval cleared');\n      if (this.intervalId !== null) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n      }\n    }\n    loadSrc() {\n      // console.log('load src');\n      if (this.state.currentPlaylistPos < this.props.playlist.length) {\n        this.audioElement.src = this.props.playlist[this.state.currentPlaylistPos].src;\n        this.audioElement.load();\n        if (this.playNext) {\n          this.audioElement.play();\n        }\n        this.setState({ progress: 0 });\n        this._clearInterval();\n      }\n    }\n    togglePlayPause() {\n      // console.log('toggle playpause');\n      if (this.state.playing) {\n        // console.log('togglePlayPause(): playing');\n        this.audioElement.pause();\n      } else if (this.audioElement.currentTime === this.audioElement.duration) {\n        this.handleEndedProgress();\n      } else {\n        this.audioElement.play();\n      }\n    }\n    skipToNext() {\n      // console.log('skip to next');\n      this.state.currentPlaylistPos = this.setCycleNumPos(this.state.currentPlaylistPos, 1, this.props.playlist.length);\n      this.loadSrc();\n    }\n    skipToPrevious() {\n      // console.log('skip to next');\n      this.state.currentPlaylistPos = this.setCycleNumPos(this.state.currentPlaylistPos, -1, this.props.playlist.length);\n      this.loadSrc();\n    }\n    togglePlayingState() {\n      this.setState({\n        playingState: this.setCycleNumPos(this.state.playingState, 1, 3)\n      });\n    }\n    setCycleNumPos(currentVal, change, length) {\n      let newPos = currentVal + change;\n      if (newPos >= length) {\n        newPos -= length;\n      }\n      if (newPos < 0) {\n        newPos += length;\n      }\n      return newPos;\n    }\n    render() {\n      const newProps = Object.assign({}, {\n        name: this.props.playlist[this.state.currentPlaylistPos].name,\n        CommentsWrapperStates: {\n          songImageSrc: this.props.playlist[this.state.currentPlaylistPos].img,\n          comments: (this.props.fullPlayer && this.props.comment) ? this.props.playlist[this.state.currentPlaylistPos].comments : null,\n          pos: this.state.currentPlaylistPos\n        },\n        controlStates: {\n          playing: this.state.playing,\n          playingState: this.state.playingState,\n          volume: this.state.volume * 100\n        },\n        controlCallbacks: {\n          setVolume: this.setVolume,\n          togglePlayPause: this.togglePlayPause,\n          togglePlayingState: this.togglePlayingState,\n          skipToNext: this.skipToNext,\n          skipToPrevious: this.skipToPrevious\n        },\n        timelineStates: {\n          playing: this.state.playing,\n          progress: this.state.progress,\n          duration: this.state.duration\n        },\n        timelineCallbacks: {\n          setProgress: this.setProgress,\n          togglePlayPause: this.togglePlayPause\n        },\n        children: this.props.children\n      }, this.props);\n      return <Audio {...newProps} />;\n    }\n\n    playEventHandler() {\n      this.audioElement.play();\n    }\n\n    pauseEventHandler() {\n      this.audioElement.pause();\n    }\n\n    skipToNextEventHandler() {\n      this.skipToNext();\n    }\n\n    skipToPreviousEventHandler() {\n      this.skipToPrevious();\n    }\n\n    componentDidMount() {\n      // console.log('Audio mounted!');\n      // set audio element event listeners\n      this.audioElement = document.createElement('audio');\n      this.audioElement.addEventListener('canplay', this.onCanPlay);\n      this.audioElement.addEventListener('ended', this.onEnded);\n      this.audioElement.addEventListener('play', this.onPlay);\n      this.audioElement.addEventListener('pause', this.onPause);\n      this.audioElement.addEventListener('volumechange', this.onVolumeChange);\n\n      this.loadSrc();\n      this.setState({ volume: this.audioElement.volume });\n\n      ReactDOM.findDOMNode(this).addEventListener('audio-play', this.playEventHandler);\n      ReactDOM.findDOMNode(this).addEventListener('audio-pause', this.pauseEventHandler);\n      ReactDOM.findDOMNode(this).addEventListener('audio-skip-to-next', this.skipToNextEventHandler);\n      ReactDOM.findDOMNode(this).addEventListener('audio-skip-to-previous', this.skipToPreviousEventHandler);\n    }\n\n    componentWillUnmount() {\n      this._clearInterval();\n      this.audioElement.removeEventListener('canplay', this.onCanPlay);\n      this.audioElement.removeEventListener('ended', this.onEnded);\n      this.audioElement.removeEventListener('play', this.onPlay);\n      this.audioElement.removeEventListener('pause', this.onPause);\n      this.audioElement.removeEventListener('volumechange', this.onVolumeChange);\n      this.audioElement = null;\n\n      ReactDOM.findDOMNode(this).removeEventListener('audio-play', this.playEventHandler);\n      ReactDOM.findDOMNode(this).removeEventListener('audio-pause', this.pauseEventHandler);\n      ReactDOM.findDOMNode(this).removeEventListener('audio-skip-to-next', this.skipToNextEventHandler);\n      ReactDOM.findDOMNode(this).removeEventListener('audio-skip-to-previous', this.skipToPreviousEventHandler);\n    }\n  };\n  \n};\n\nexport default HOCAudio;\n"]},"metadata":{},"sourceType":"module"}