{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\karan\\\\my-app1\\\\src\\\\Components\\\\withSoundCloudAudio.js\";\nimport React, { Component } from 'react';\nimport SoundCloudAudio from 'soundcloud-audio';\nimport hoistStatics from 'hoist-non-react-statics';\nimport { stopAllOther, addToPlayedStore, resetPlayedStore } from '../utils/audioStore.js';\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nexport default function withSoundCloudAudio(WrappedComponent) {\n  var WithSoundCloudAudio =\n  /*#__PURE__*/\n  function (_Component) {\n    _inherits(WithSoundCloudAudio, _Component);\n\n    function WithSoundCloudAudio(props, context) {\n      var _this;\n\n      _classCallCheck(this, WithSoundCloudAudio);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(WithSoundCloudAudio).call(this, props, context));\n\n      if (!props.clientId && !props.soundCloudAudio && !props.streamUrl) {\n        console.warn(\"You need to get a clientId from SoundCloud,\\n          pass in an instance of SoundCloudAudio\\n          or use streamUrl with audio source instead\\n          https://github.com/soundblogs/react-soundplayer#examples\");\n      } // Don't create a SoundCloudAudio instance\n      // if there is no `window`\n\n\n      if ('undefined' !== typeof window) {\n        if (props.soundCloudAudio) {\n          _this.soundCloudAudio = props.soundCloudAudio;\n        } else {\n          _this.soundCloudAudio = new SoundCloudAudio(props.clientId);\n        }\n      }\n\n      _this.state = {\n        duration: 0,\n        currentTime: 0,\n        seeking: false,\n        playing: false,\n        volume: 1,\n        isMuted: false\n      };\n      return _this;\n    }\n\n    _createClass(WithSoundCloudAudio, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this.mounted = true;\n        this.requestAudio();\n        this.listenAudioEvents();\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this.mounted = false;\n        resetPlayedStore();\n        this.soundCloudAudio.unbindAll();\n      }\n    }, {\n      key: \"requestAudio\",\n      value: function requestAudio() {\n        var _this2 = this;\n\n        var soundCloudAudio = this.soundCloudAudio;\n        var _this$props = this.props,\n            resolveUrl = _this$props.resolveUrl,\n            streamUrl = _this$props.streamUrl,\n            preloadType = _this$props.preloadType,\n            onReady = _this$props.onReady;\n\n        if (streamUrl) {\n          soundCloudAudio.preload(streamUrl, preloadType);\n        } else if (resolveUrl) {\n          soundCloudAudio.resolve(resolveUrl, function (data) {\n            if (!_this2.mounted) {\n              return;\n            }\n\n            _this2.setState(_defineProperty({}, data.tracks ? 'playlist' : 'track', data), function () {\n              return onReady && onReady();\n            });\n          });\n        }\n      }\n    }, {\n      key: \"listenAudioEvents\",\n      value: function listenAudioEvents() {\n        var soundCloudAudio = this.soundCloudAudio; // https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\n\n        soundCloudAudio.on('playing', this.onAudioStarted);\n        soundCloudAudio.on('timeupdate', this.getCurrentTime);\n        soundCloudAudio.on('loadedmetadata', this.getDuration);\n        soundCloudAudio.on('seeking', this.onSeekingTrack);\n        soundCloudAudio.on('seeked', this.onSeekedTrack);\n        soundCloudAudio.on('pause', this.onAudioPaused);\n        soundCloudAudio.on('ended', this.onAudioEnded);\n        soundCloudAudio.on('volumechange', this.onVolumeChange);\n      }\n    }, {\n      key: \"onSeekingTrack\",\n      value: function onSeekingTrack() {\n        this.setState({\n          seeking: true\n        });\n      }\n    }, {\n      key: \"onSeekedTrack\",\n      value: function onSeekedTrack() {\n        this.setState({\n          seeking: false\n        });\n      }\n    }, {\n      key: \"onAudioStarted\",\n      value: function onAudioStarted() {\n        var soundCloudAudio = this.soundCloudAudio;\n        var onStartTrack = this.props.onStartTrack;\n        this.setState({\n          playing: true\n        });\n        stopAllOther(soundCloudAudio.playing);\n        addToPlayedStore(soundCloudAudio);\n        onStartTrack && onStartTrack(soundCloudAudio, soundCloudAudio.playing);\n      }\n    }, {\n      key: \"onAudioPaused\",\n      value: function onAudioPaused() {\n        var onPauseTrack = this.props.onPauseTrack;\n        this.setState({\n          playing: false\n        });\n        onPauseTrack && onPauseTrack(this.soundCloudAudio);\n      }\n    }, {\n      key: \"onAudioEnded\",\n      value: function onAudioEnded() {\n        var onStopTrack = this.props.onStopTrack;\n        this.setState({\n          playing: false\n        });\n        onStopTrack && onStopTrack(this.soundCloudAudio);\n      }\n    }, {\n      key: \"onVolumeChange\",\n      value: function onVolumeChange() {\n        this.setState({\n          volume: this.soundCloudAudio.audio.volume,\n          isMuted: this.soundCloudAudio.audio.muted\n        });\n      }\n    }, {\n      key: \"getCurrentTime\",\n      value: function getCurrentTime() {\n        this.setState({\n          currentTime: this.soundCloudAudio.audio.currentTime\n        });\n      }\n    }, {\n      key: \"getDuration\",\n      value: function getDuration() {\n        this.setState({\n          duration: this.soundCloudAudio.audio.duration\n        });\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return React.createElement(WrappedComponent, Object.assign({}, this.props, {\n          soundCloudAudio: this.soundCloudAudio\n        }, this.state, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }));\n      }\n    }]);\n\n    return WithSoundCloudAudio;\n  }(Component);\n\n  WithSoundCloudAudio.displayName = \"withSoundCloudAudio(\".concat(getDisplayName(WrappedComponent), \")\");\n  WithSoundCloudAudio.WrappedComponent = WrappedComponent;\n  return hoistStatics(WithSoundCloudAudio, WrappedComponent);\n}","map":{"version":3,"sources":["C:\\Users\\karan\\my-app1\\src\\Components\\withSoundCloudAudio.js"],"names":["React","Component","SoundCloudAudio","hoistStatics","stopAllOther","addToPlayedStore","resetPlayedStore","getDisplayName","WrappedComponent","displayName","name","withSoundCloudAudio","WithSoundCloudAudio","props","context","clientId","soundCloudAudio","streamUrl","console","warn","window","state","duration","currentTime","seeking","playing","volume","isMuted","mounted","requestAudio","listenAudioEvents","unbindAll","resolveUrl","preloadType","onReady","preload","resolve","data","setState","tracks","on","onAudioStarted","getCurrentTime","getDuration","onSeekingTrack","onSeekedTrack","onAudioPaused","onAudioEnded","onVolumeChange","onStartTrack","onPauseTrack","onStopTrack","audio","muted"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport SoundCloudAudio from 'soundcloud-audio';\nimport hoistStatics from 'hoist-non-react-statics';\nimport {\n  stopAllOther,\n  addToPlayedStore,\n  resetPlayedStore\n} from '../utils/audioStore.js';\n\nfunction getDisplayName (WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nexport default function withSoundCloudAudio (WrappedComponent) {\n  class WithSoundCloudAudio extends Component {\n    constructor(props, context) {\n      super(props, context);\n\n      if (!props.clientId && !props.soundCloudAudio && !props.streamUrl) {\n        console.warn(\n          `You need to get a clientId from SoundCloud,\n          pass in an instance of SoundCloudAudio\n          or use streamUrl with audio source instead\n          https://github.com/soundblogs/react-soundplayer#examples`\n        );\n      }\n\n      // Don't create a SoundCloudAudio instance\n      // if there is no `window`\n      if ('undefined' !== typeof window) {\n        if (props.soundCloudAudio) {\n          this.soundCloudAudio = props.soundCloudAudio;\n        } else {\n          this.soundCloudAudio = new SoundCloudAudio(props.clientId);\n        }\n      }\n\n      this.state = {\n        duration: 0,\n        currentTime: 0,\n        seeking: false,\n        playing: false,\n        volume: 1,\n        isMuted: false\n      };\n    }\n\n    componentDidMount() {\n      this.mounted = true;\n\n      this.requestAudio();\n      this.listenAudioEvents();\n    }\n\n    componentWillUnmount() {\n      this.mounted = false;\n\n      resetPlayedStore();\n      this.soundCloudAudio.unbindAll();\n    }\n\n    requestAudio() {\n      const { soundCloudAudio } = this;\n      const {\n        resolveUrl,\n        streamUrl,\n        preloadType,\n        onReady\n      } = this.props;\n\n      if (streamUrl) {\n        soundCloudAudio.preload(streamUrl, preloadType);\n      } else if (resolveUrl) {\n        soundCloudAudio.resolve(resolveUrl, (data) => {\n          if (!this.mounted) {\n            return;\n          }\n\n          this.setState({\n            [data.tracks ? 'playlist' : 'track']: data\n          }, () => onReady && onReady());\n        });\n      }\n    }\n\n    listenAudioEvents() {\n      const { soundCloudAudio } = this;\n\n      // https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\n      soundCloudAudio.on('playing', this.onAudioStarted);\n      soundCloudAudio.on('timeupdate', this.getCurrentTime);\n      soundCloudAudio.on('loadedmetadata', this.getDuration);\n      soundCloudAudio.on('seeking',this.onSeekingTrack);\n      soundCloudAudio.on('seeked', this.onSeekedTrack);\n      soundCloudAudio.on('pause', this.onAudioPaused);\n      soundCloudAudio.on('ended', this.onAudioEnded);\n      soundCloudAudio.on('volumechange', this.onVolumeChange);\n    }\n\n    onSeekingTrack() {\n      this.setState({seeking: true});\n    }\n\n    onSeekedTrack() {\n      this.setState({seeking: false});\n    }\n\n    onAudioStarted() {\n      const { soundCloudAudio } = this;\n      const { onStartTrack } = this.props;\n\n      this.setState({playing: true});\n\n      stopAllOther(soundCloudAudio.playing);\n      addToPlayedStore(soundCloudAudio);\n\n      onStartTrack && onStartTrack(soundCloudAudio, soundCloudAudio.playing);\n    }\n\n    onAudioPaused() {\n      const { onPauseTrack } = this.props;\n\n      this.setState({playing: false});\n\n      onPauseTrack && onPauseTrack(this.soundCloudAudio);\n    }\n\n    onAudioEnded() {\n      const { onStopTrack } = this.props;\n\n      this.setState({playing: false});\n\n      onStopTrack && onStopTrack(this.soundCloudAudio);\n    }\n\n    onVolumeChange() {\n      this.setState({\n        volume: this.soundCloudAudio.audio.volume,\n        isMuted: this.soundCloudAudio.audio.muted\n      });\n    }\n\n    getCurrentTime() {\n      this.setState({\n        currentTime: this.soundCloudAudio.audio.currentTime\n      });\n    }\n\n    getDuration() {\n      this.setState({\n        duration: this.soundCloudAudio.audio.duration\n      });\n    }\n\n    render() {\n      return (\n        <WrappedComponent\n          {...this.props}\n          soundCloudAudio={this.soundCloudAudio}\n          {...this.state}\n        />\n      );\n    }\n  }\n\n  WithSoundCloudAudio.displayName = `withSoundCloudAudio(${getDisplayName(WrappedComponent)})`;\n  WithSoundCloudAudio.WrappedComponent = WrappedComponent;\n\n  return hoistStatics(WithSoundCloudAudio, WrappedComponent);\n}\n"]},"metadata":{},"sourceType":"module"}