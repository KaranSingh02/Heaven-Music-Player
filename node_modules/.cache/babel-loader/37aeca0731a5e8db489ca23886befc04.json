{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\karan\\\\my-app1\\\\src\\\\Player\\\\VolumeControl.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SoundCloudAudio from 'soundcloud-audio';\nimport ClassNames from 'classnames';\nimport { VolumeIconLoudSVG, VolumeIconMuteSVG } from './Icons';\n\nvar VolumeControl =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(VolumeControl, _Component);\n\n  function VolumeControl() {\n    _classCallCheck(this, VolumeControl);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(VolumeControl).apply(this, arguments));\n  }\n\n  _createClass(VolumeControl, [{\n    key: \"handleVolumeChange\",\n    value: function handleVolumeChange(e) {\n      var _this$props = this.props,\n          onVolumeChange = _this$props.onVolumeChange,\n          onToggleMute = _this$props.onToggleMute,\n          soundCloudAudio = _this$props.soundCloudAudio,\n          isMuted = _this$props.isMuted;\n      var xPos = e.target.value / 100;\n      var mute = xPos <= 0 && !isMuted;\n\n      if (soundCloudAudio && !isNaN(soundCloudAudio.audio.volume)) {\n        soundCloudAudio.audio.volume = xPos;\n        soundCloudAudio.audio.muted = mute;\n      }\n\n      if (mute !== isMuted) {\n        onToggleMute && onToggleMute.call(this, mute, e);\n      }\n\n      onVolumeChange && onVolumeChange.call(this, xPos, e);\n    }\n  }, {\n    key: \"handleMute\",\n    value: function handleMute(e) {\n      var _this$props2 = this.props,\n          onToggleMute = _this$props2.onToggleMute,\n          soundCloudAudio = _this$props2.soundCloudAudio;\n\n      if (soundCloudAudio && !isNaN(soundCloudAudio.audio.muted)) {\n        soundCloudAudio.audio.muted = !soundCloudAudio.audio.muted;\n      }\n\n      onToggleMute && onToggleMute.call(this, !this.props.isMuted, e);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          className = _this$props3.className,\n          buttonClassName = _this$props3.buttonClassName,\n          rangeClassName = _this$props3.rangeClassName,\n          volume = _this$props3.volume,\n          isMuted = _this$props3.isMuted;\n      var value = volume * 100 || 0;\n\n      if (value < 0 || isMuted) {\n        value = 0;\n      }\n\n      if (value > 100) {\n        value = 100;\n      }\n\n      var classNames = ClassNames('sb-soundplayer-volume', className);\n      var buttonClassNames = ClassNames('sb-soundplayer-btn sb-soundplayer-volume-btn', buttonClassName);\n      var rangeClassNames = ClassNames('sb-soundplayer-volume-range', rangeClassName);\n      return React.createElement(\"div\", {\n        className: classNames,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: buttonClassNames,\n        onClick: this.handleMute,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, isMuted ? React.createElement(VolumeIconMuteSVG, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }) : React.createElement(VolumeIconLoudSVG, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: rangeClassNames,\n        type: \"range\",\n        min: \"0\",\n        max: \"100\",\n        step: \"1\",\n        value: value,\n        onChange: this.handleVolumeChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return VolumeControl;\n}(Component);\n\nVolumeControl.propTypes = {\n  className: PropTypes.string,\n  buttonClassName: PropTypes.string,\n  rangeClassName: PropTypes.string,\n  volume: PropTypes.number,\n  onVolumeChange: PropTypes.func,\n  onToggleMute: PropTypes.func,\n  soundCloudAudio: PropTypes.instanceOf(SoundCloudAudio)\n};\nVolumeControl.defaultProps = {\n  volume: 1,\n  isMuted: 0\n};\nexport default VolumeControl;","map":{"version":3,"sources":["C:\\Users\\karan\\my-app1\\src\\Player\\VolumeControl.js"],"names":["React","Component","PropTypes","SoundCloudAudio","ClassNames","VolumeIconLoudSVG","VolumeIconMuteSVG","VolumeControl","e","props","onVolumeChange","onToggleMute","soundCloudAudio","isMuted","xPos","target","value","mute","isNaN","audio","volume","muted","call","className","buttonClassName","rangeClassName","classNames","buttonClassNames","rangeClassNames","handleMute","handleVolumeChange","propTypes","string","number","func","instanceOf","defaultProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,eAAP,MAA4B,kBAA5B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,SAArD;;IAEMC,a;;;;;;;;;;;;;uCACeC,C,EAAG;AAAA,wBAMhB,KAAKC,KANW;AAAA,UAElBC,cAFkB,eAElBA,cAFkB;AAAA,UAGlBC,YAHkB,eAGlBA,YAHkB;AAAA,UAIlBC,eAJkB,eAIlBA,eAJkB;AAAA,UAKlBC,OALkB,eAKlBA,OALkB;AAOpB,UAAMC,IAAI,GAAIN,CAAC,CAACO,MAAF,CAASC,KAAT,GAAiB,GAA/B;AACA,UAAMC,IAAI,GAAIH,IAAI,IAAI,CAAR,IAAa,CAACD,OAA5B;;AAEA,UAAID,eAAe,IAAI,CAACM,KAAK,CAACN,eAAe,CAACO,KAAhB,CAAsBC,MAAvB,CAA7B,EAA6D;AAC3DR,QAAAA,eAAe,CAACO,KAAhB,CAAsBC,MAAtB,GAA+BN,IAA/B;AACAF,QAAAA,eAAe,CAACO,KAAhB,CAAsBE,KAAtB,GAA8BJ,IAA9B;AACD;;AAED,UAAIA,IAAI,KAAKJ,OAAb,EAAsB;AACpBF,QAAAA,YAAY,IAAIA,YAAY,CAACW,IAAb,CAAkB,IAAlB,EAAwBL,IAAxB,EAA8BT,CAA9B,CAAhB;AACD;;AAEDE,MAAAA,cAAc,IAAIA,cAAc,CAACY,IAAf,CAAoB,IAApB,EAA0BR,IAA1B,EAAgCN,CAAhC,CAAlB;AACD;;;+BAEUA,C,EAAG;AAAA,yBAC8B,KAAKC,KADnC;AAAA,UACJE,YADI,gBACJA,YADI;AAAA,UACUC,eADV,gBACUA,eADV;;AAGZ,UAAIA,eAAe,IAAI,CAACM,KAAK,CAACN,eAAe,CAACO,KAAhB,CAAsBE,KAAvB,CAA7B,EAA4D;AAC1DT,QAAAA,eAAe,CAACO,KAAhB,CAAsBE,KAAtB,GAA8B,CAACT,eAAe,CAACO,KAAhB,CAAsBE,KAArD;AACD;;AAEDV,MAAAA,YAAY,IAAIA,YAAY,CAACW,IAAb,CAAkB,IAAlB,EAAwB,CAAC,KAAKb,KAAL,CAAWI,OAApC,EAA6CL,CAA7C,CAAhB;AACD;;;6BAEQ;AAAA,yBACiE,KAAKC,KADtE;AAAA,UACCc,SADD,gBACCA,SADD;AAAA,UACYC,eADZ,gBACYA,eADZ;AAAA,UAC6BC,cAD7B,gBAC6BA,cAD7B;AAAA,UAC6CL,MAD7C,gBAC6CA,MAD7C;AAAA,UACqDP,OADrD,gBACqDA,OADrD;AAGP,UAAIG,KAAK,GAAGI,MAAM,GAAG,GAAT,IAAgB,CAA5B;;AAEA,UAAIJ,KAAK,GAAG,CAAR,IAAaH,OAAjB,EAA0B;AACxBG,QAAAA,KAAK,GAAG,CAAR;AACD;;AAED,UAAIA,KAAK,GAAG,GAAZ,EAAiB;AACfA,QAAAA,KAAK,GAAG,GAAR;AACD;;AAED,UAAMU,UAAU,GAAGtB,UAAU,CAAC,uBAAD,EAA0BmB,SAA1B,CAA7B;AACA,UAAMI,gBAAgB,GAAGvB,UAAU,CAAC,8CAAD,EAAiDoB,eAAjD,CAAnC;AACA,UAAMI,eAAe,GAAGxB,UAAU,CAAC,6BAAD,EAAgCqB,cAAhC,CAAlC;AAEA,aACE;AAAK,QAAA,SAAS,EAAEC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,SAAS,EAAEC,gBAAnB;AAAqC,QAAA,OAAO,EAAE,KAAKE,UAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGhB,OAAO,GAAG,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAH,GAA2B,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADrC,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,SAAS,EAAEe,eAAlB;AAAmC,QAAA,IAAI,EAAC,OAAxC;AAAgD,QAAA,GAAG,EAAC,GAApD;AAAwD,QAAA,GAAG,EAAC,KAA5D;AAAkE,QAAA,IAAI,EAAC,GAAvE;AAA2E,QAAA,KAAK,EAAEZ,KAAlF;AAAyF,QAAA,QAAQ,EAAE,KAAKc,kBAAxG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAJF,CADF;AAUD;;;;EA5DyB7B,S;;AA+D5BM,aAAa,CAACwB,SAAd,GAA0B;AACxBR,EAAAA,SAAS,EAAErB,SAAS,CAAC8B,MADG;AAExBR,EAAAA,eAAe,EAAEtB,SAAS,CAAC8B,MAFH;AAGxBP,EAAAA,cAAc,EAAEvB,SAAS,CAAC8B,MAHF;AAIxBZ,EAAAA,MAAM,EAAElB,SAAS,CAAC+B,MAJM;AAKxBvB,EAAAA,cAAc,EAAER,SAAS,CAACgC,IALF;AAMxBvB,EAAAA,YAAY,EAAET,SAAS,CAACgC,IANA;AAOxBtB,EAAAA,eAAe,EAAEV,SAAS,CAACiC,UAAV,CAAqBhC,eAArB;AAPO,CAA1B;AAUAI,aAAa,CAAC6B,YAAd,GAA6B;AAC3BhB,EAAAA,MAAM,EAAE,CADmB;AAE3BP,EAAAA,OAAO,EAAE;AAFkB,CAA7B;AAKA,eAAeN,aAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SoundCloudAudio from 'soundcloud-audio';\nimport ClassNames from 'classnames';\nimport { VolumeIconLoudSVG, VolumeIconMuteSVG } from './Icons';\n\nclass VolumeControl extends Component {\n  handleVolumeChange(e) {\n    const {\n      onVolumeChange,\n      onToggleMute,\n      soundCloudAudio,\n      isMuted\n    } = this.props;\n    const xPos = (e.target.value / 100);\n    const mute = (xPos <= 0 && !isMuted);\n\n    if (soundCloudAudio && !isNaN(soundCloudAudio.audio.volume)) {\n      soundCloudAudio.audio.volume = xPos;\n      soundCloudAudio.audio.muted = mute;\n    }\n\n    if (mute !== isMuted) {\n      onToggleMute && onToggleMute.call(this, mute, e);\n    }\n\n    onVolumeChange && onVolumeChange.call(this, xPos, e);\n  }\n\n  handleMute(e) {\n    const { onToggleMute, soundCloudAudio } = this.props;\n\n    if (soundCloudAudio && !isNaN(soundCloudAudio.audio.muted)) {\n      soundCloudAudio.audio.muted = !soundCloudAudio.audio.muted;\n    }\n\n    onToggleMute && onToggleMute.call(this, !this.props.isMuted, e);\n  }\n\n  render() {\n    const { className, buttonClassName, rangeClassName, volume, isMuted } = this.props;\n\n    let value = volume * 100 || 0;\n\n    if (value < 0 || isMuted) {\n      value = 0;\n    }\n\n    if (value > 100) {\n      value = 100;\n    }\n\n    const classNames = ClassNames('sb-soundplayer-volume', className);\n    const buttonClassNames = ClassNames('sb-soundplayer-btn sb-soundplayer-volume-btn', buttonClassName);\n    const rangeClassNames = ClassNames('sb-soundplayer-volume-range', rangeClassName);\n\n    return (\n      <div className={classNames}>\n        <button className={buttonClassNames} onClick={this.handleMute}>\n          {isMuted ? <VolumeIconMuteSVG /> : <VolumeIconLoudSVG />}\n        </button>\n        <div>\n          <input className={rangeClassNames} type=\"range\" min=\"0\" max=\"100\" step=\"1\" value={value} onChange={this.handleVolumeChange} />\n        </div>\n      </div>\n    );\n  }\n}\n\nVolumeControl.propTypes = {\n  className: PropTypes.string,\n  buttonClassName: PropTypes.string,\n  rangeClassName: PropTypes.string,\n  volume: PropTypes.number,\n  onVolumeChange: PropTypes.func,\n  onToggleMute: PropTypes.func,\n  soundCloudAudio: PropTypes.instanceOf(SoundCloudAudio)\n};\n\nVolumeControl.defaultProps = {\n  volume: 1,\n  isMuted: 0\n};\n\nexport default VolumeControl;\n"]},"metadata":{},"sourceType":"module"}