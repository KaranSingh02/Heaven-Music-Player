{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\karan\\\\my-app1\\\\src\\\\Components\\\\bottomplayer\\\\CommentsContainer.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { TransitionMotion, spring } from 'react-motion';\nimport Comment from './Comment';\n\nvar CommentsContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CommentsContainer, _React$Component);\n\n  function CommentsContainer(props) {\n    var _this;\n\n    _classCallCheck(this, CommentsContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CommentsContainer).call(this, props));\n    _this.state = {\n      visibleComments: [],\n      commentHeight: 32,\n      scroll: true,\n      clearScreen: false\n    };\n    _this.willLeave = _this.willLeave.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onMouseEnter = _this.onMouseEnter.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onMouseLeave = _this.onMouseLeave.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(CommentsContainer, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var height = nextProps.height,\n          progress = nextProps.progress,\n          comments = nextProps.comments; // get the comments whose .time are smaller than audio progress\n\n      var filteredComments = comments.filter(function (comment) {\n        return progress >= comment.time;\n      }).sort(this.sortComments);\n      var length = filteredComments.length;\n\n      if (length === 0) {\n        return this.setState({\n          visibleComments: []\n        });\n      }\n\n      var maxItems = Math.floor(height / this.state.commentHeight);\n\n      if (length > maxItems) {\n        return this.setState({\n          visibleComments: filteredComments.slice(length - maxItems, length)\n        });\n      }\n\n      return this.setState({\n        visibleComments: filteredComments\n      });\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return this.state.scroll;\n    }\n  }, {\n    key: \"onMouseEnter\",\n    value: function onMouseEnter() {\n      this.setState({\n        scroll: false\n      });\n    }\n  }, {\n    key: \"onMouseLeave\",\n    value: function onMouseLeave() {\n      this.setState({\n        scroll: true\n      });\n    }\n  }, {\n    key: \"sortComments\",\n    value: function sortComments(a, b) {\n      if (a.time < b.time) {\n        return -1;\n      }\n\n      if (a.time > b.time) {\n        return 1;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"willEnter\",\n    value: function willEnter() {\n      return {\n        height: 0,\n        opacity: 0\n      };\n    }\n  }, {\n    key: \"willLeave\",\n    value: function willLeave() {\n      if (this.state.clearScreen) {\n        return null;\n      }\n\n      return {\n        height: spring(0),\n        opacity: spring(0),\n        fontSize: 0\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(TransitionMotion, {\n        willEnter: this.willEnter,\n        willLeave: this.willLeave,\n        styles: this.state.visibleComments.map(function (item) {\n          return {\n            key: \"\".concat(item.time),\n            data: item.content,\n            style: {\n              height: spring(_this2.state.commentHeight),\n              opacity: spring(1)\n            }\n          };\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, function (interpolatedStyles) {\n        return React.createElement(\"div\", {\n          className: _this2.props.className,\n          onMouseEnter: _this2.onMouseEnter,\n          onMouseLeave: _this2.onMouseLeave,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }, interpolatedStyles.map(function (config) {\n          return React.createElement(Comment, {\n            key: config.key,\n            content: config.data,\n            style: config.style,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 105\n            },\n            __self: this\n          });\n        }));\n      });\n    }\n  }]);\n\n  return CommentsContainer;\n}(React.Component);\n\nCommentsContainer.propTypes = {\n  className: PropTypes.string,\n  height: PropTypes.number,\n  progress: PropTypes.number\n};\nexport default CommentsContainer;","map":{"version":3,"sources":["C:\\Users\\karan\\my-app1\\src\\Components\\bottomplayer\\CommentsContainer.jsx"],"names":["React","PropTypes","TransitionMotion","spring","Comment","CommentsContainer","props","state","visibleComments","commentHeight","scroll","clearScreen","willLeave","bind","onMouseEnter","onMouseLeave","nextProps","height","progress","comments","filteredComments","filter","comment","time","sort","sortComments","length","setState","maxItems","Math","floor","slice","a","b","opacity","fontSize","willEnter","map","item","key","data","content","style","interpolatedStyles","className","config","Component","propTypes","string","number"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TransitionMotion, spring } from 'react-motion';\nimport Comment from './Comment';\n\nclass CommentsContainer extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    height: PropTypes.number,\n    progress: PropTypes.number\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      visibleComments: [],\n      commentHeight: 32,\n      scroll: true,\n      clearScreen: false\n    };\n    this.willLeave = this.willLeave.bind(this);\n    this.onMouseEnter = this.onMouseEnter.bind(this);\n    this.onMouseLeave = this.onMouseLeave.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {\n      height,\n      progress,\n      comments\n    } = nextProps;\n    // get the comments whose .time are smaller than audio progress\n    const filteredComments = comments.filter((comment) => {\n      return progress >= comment.time;\n    })\n    .sort(this.sortComments);\n\n    const length = filteredComments.length;\n    if (length === 0) { return this.setState({ visibleComments: [] }); }\n\n    const maxItems = Math.floor(height / this.state.commentHeight);\n    if (length > maxItems) {\n      return this.setState({\n        visibleComments: filteredComments.slice(length - maxItems, length)\n      });\n    }\n    return this.setState({ visibleComments: filteredComments });\n  }\n\n  shouldComponentUpdate() {\n    return this.state.scroll;\n  }\n\n  onMouseEnter() {\n    this.setState({ scroll: false });\n  }\n\n  onMouseLeave() {\n    this.setState({ scroll: true });\n  }\n\n  sortComments(a, b) {\n    if (a.time < b.time) {\n      return -1;\n    }\n    if (a.time > b.time) {\n      return 1;\n    }\n    return 0;\n  }\n\n  willEnter() {\n    return {\n      height: 0,\n      opacity: 0\n    };\n  }\n\n  willLeave() {\n    if (this.state.clearScreen) { return null; }\n    return {\n      height: spring(0),\n      opacity: spring(0),\n      fontSize: 0\n    };\n  }\n\n  render() {\n    return (\n      <TransitionMotion\n        willEnter={this.willEnter}\n        willLeave={this.willLeave}\n        styles={this.state.visibleComments.map(item => ({\n          key: `${item.time}`,\n          data: item.content,\n          style: {\n            height: spring(this.state.commentHeight),\n            opacity: spring(1)\n          }\n        }))}\n      >\n        {interpolatedStyles =>\n          <div className={this.props.className} onMouseEnter={this.onMouseEnter} onMouseLeave={this.onMouseLeave}>\n            {interpolatedStyles.map(config => (\n              <Comment\n                key={config.key}\n                content={config.data}\n                style={config.style}\n              />\n            ))}\n          </div>\n        }\n      </TransitionMotion>\n    );\n  }\n}\n\nexport default CommentsContainer;\n"]},"metadata":{},"sourceType":"module"}