{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\karan\\\\my-app1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\karan\\\\my-app1\\\\src\\\\Components\\\\audioplayer.js\";\nimport React, { Component } from 'react';\nimport '../style.css';\nimport noBodyCanSaveMeNow from \"../LP/1.mp3\";\nimport goodBye from \"../LP/2.mp3\";\n{\n  /*function getTime(time) {\r\n   if (!isNaN(time)) {\r\n     return (\r\n       Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\r\n     );\r\n   }\r\n  }\r\n  \n  class Musicplayer extends Component {\r\n   state = {\r\n     selectedTrack: null,\r\n     player: \"stopped\",\r\n     currentTime: null,\r\n     duration: null\r\n   };\r\n  \n   componentDidMount() {\r\n     this.player.addEventListener(\"timeupdate\", e => {\r\n       this.setState({\r\n         currentTime: e.target.currentTime,\r\n         duration: e.target.duration\r\n       });\r\n     });\r\n   }\r\n  \n   componentWillUnmount() {\r\n     this.player.removeEventListener(\"timeupdate\", () => {});\r\n   }\r\n  \n   componentDidUpdate(prevProps, prevState) {\r\n     if (this.state.selectedTrack !== prevState.selectedTrack) {\r\n       let track;\r\n       switch (this.state.selectedTrack) {\r\n         case \"Nobody can save me now\":\r\n           track = noBodyCanSaveMeNow;\r\n           break;\r\n         case \"Good Goodbye\":\r\n           track = goodBye;\r\n           break;\r\n         default:\r\n           break;\r\n       }\r\n       if (track) {\r\n         this.player.src = track;\r\n         console.log(this.player.src)\r\n         this.player.play();\r\n         this.setState({ player: \"playing\", duration: this.player.duration });\r\n       }\r\n     }\r\n     if (this.state.player !== prevState.player) {\r\n       if (this.state.player === \"paused\") {\r\n         this.player.pause();\r\n       } else if (this.state.player === \"stopped\") {\r\n         this.player.pause();\r\n         this.player.currentTime = 0;\r\n         this.setState({ selectedTrack: null });\r\n       } else if (\r\n         this.state.player === \"playing\" &&\r\n         prevState.player === \"paused\"\r\n       ) {\r\n         this.player.play();\r\n       }\r\n     }\r\n   }\r\n  \n   render() {\r\n     const list = [\r\n       { id: 1, title: \"Nobody can save me now\" },\r\n       { id: 2, title: \"Good Goodbye\" }\r\n     ].map(item => {\r\n       return (\r\n         <li\r\n           key={item.id}\r\n           onClick={() => this.setState({ selectedTrack: item.title })}\r\n         >\r\n           {item.title}\r\n         </li>\r\n       );\r\n     });\r\n  \n     const currentTime = getTime(this.state.currentTime);\r\n     const duration = getTime(this.state.duration);\r\n  \n     return (\r\n       <>\r\n       <div className=\"player\">\r\n         <h1>Heaven Player</h1>\r\n         <ul>{list}</ul>\r\n         <div>\r\n           {this.state.player === \"paused\" && (\r\n             <button onClick={() => this.setState({ player: \"playing\" })}>\r\n               Play\r\n             </button>\r\n           )}\r\n           {this.state.player === \"playing\" && (\r\n             <button onClick={() => this.setState({ player: \"paused\" })}>\r\n               Pause\r\n             </button>\r\n           )}\r\n           {this.state.player === \"playing\" || this.state.player === \"paused\" ? (\r\n             <button onClick={() => this.setState({ player: \"stopped\" })}>\r\n               Stop\r\n             </button>\r\n           ) : (\r\n             \"\"\r\n           )}\r\n         </div>\r\n         {this.state.player === \"playing\" || this.state.player === \"paused\" ? (\r\n           <div>\r\n             {currentTime} / {duration}\r\n           </div>\r\n         ) : (\r\n           \"\"\r\n         )}\r\n         <audio ref={ref => (this.player = ref)} />\r\n         </div>\r\n       </>\r\n     );\r\n   }\r\n  }\r\n  */\n}\n\nvar Musicplayer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Musicplayer, _Component);\n\n  function Musicplayer() {\n    _classCallCheck(this, Musicplayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Musicplayer).apply(this, arguments));\n  }\n\n  _createClass(Musicplayer, [{\n    key: \"handleclick\",\n    value: function handleclick(e) {\n      React.createElement(\"audio\", {\n        ref: function ref(_ref) {\n          return e.player = _ref;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"player\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.handleclick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \"Click me\"));\n    }\n  }]);\n\n  return Musicplayer;\n}(Component);\n\nexport default Musicplayer;","map":{"version":3,"sources":["C:\\Users\\karan\\my-app1\\src\\Components\\audioplayer.js"],"names":["React","Component","noBodyCanSaveMeNow","goodBye","Musicplayer","e","ref","player","handleclick"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,cAAP;AACA,OAAOC,kBAAP,MAA+B,aAA/B;AACA,OAAOC,OAAP,MAAoB,aAApB;AAEA;AAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwHE;;IAEGC,W;;;;;;;;;;;;;gCACQC,C,EAAE;AACZ;AAAO,QAAA,GAAG,EAAE,aAAAC,IAAG;AAAA,iBAAKD,CAAC,CAACE,MAAF,GAAWD,IAAhB;AAAA,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD;;;6BACQ;AACP,aACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAQ,QAAA,OAAO,EAAI,KAAKE,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADA,CADF;AAOD;;;;EAZuBP,S;;AAe1B,eAAeG,WAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport '../style.css';\r\nimport noBodyCanSaveMeNow from \"../LP/1.mp3\";\r\nimport goodBye from \"../LP/2.mp3\";\r\n\r\n{/*function getTime(time) {\r\n  if (!isNaN(time)) {\r\n    return (\r\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\r\n    );\r\n  }\r\n}\r\n\r\nclass Musicplayer extends Component {\r\n  state = {\r\n    selectedTrack: null,\r\n    player: \"stopped\",\r\n    currentTime: null,\r\n    duration: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.player.addEventListener(\"timeupdate\", e => {\r\n      this.setState({\r\n        currentTime: e.target.currentTime,\r\n        duration: e.target.duration\r\n      });\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.player.removeEventListener(\"timeupdate\", () => {});\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state.selectedTrack !== prevState.selectedTrack) {\r\n      let track;\r\n      switch (this.state.selectedTrack) {\r\n        case \"Nobody can save me now\":\r\n          track = noBodyCanSaveMeNow;\r\n          break;\r\n        case \"Good Goodbye\":\r\n          track = goodBye;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      if (track) {\r\n        this.player.src = track;\r\n        console.log(this.player.src)\r\n        this.player.play();\r\n        this.setState({ player: \"playing\", duration: this.player.duration });\r\n      }\r\n    }\r\n    if (this.state.player !== prevState.player) {\r\n      if (this.state.player === \"paused\") {\r\n        this.player.pause();\r\n      } else if (this.state.player === \"stopped\") {\r\n        this.player.pause();\r\n        this.player.currentTime = 0;\r\n        this.setState({ selectedTrack: null });\r\n      } else if (\r\n        this.state.player === \"playing\" &&\r\n        prevState.player === \"paused\"\r\n      ) {\r\n        this.player.play();\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const list = [\r\n      { id: 1, title: \"Nobody can save me now\" },\r\n      { id: 2, title: \"Good Goodbye\" }\r\n    ].map(item => {\r\n      return (\r\n        <li\r\n          key={item.id}\r\n          onClick={() => this.setState({ selectedTrack: item.title })}\r\n        >\r\n          {item.title}\r\n        </li>\r\n      );\r\n    });\r\n\r\n    const currentTime = getTime(this.state.currentTime);\r\n    const duration = getTime(this.state.duration);\r\n\r\n    return (\r\n      <>\r\n      <div className=\"player\">\r\n        <h1>Heaven Player</h1>\r\n        <ul>{list}</ul>\r\n        <div>\r\n          {this.state.player === \"paused\" && (\r\n            <button onClick={() => this.setState({ player: \"playing\" })}>\r\n              Play\r\n            </button>\r\n          )}\r\n          {this.state.player === \"playing\" && (\r\n            <button onClick={() => this.setState({ player: \"paused\" })}>\r\n              Pause\r\n            </button>\r\n          )}\r\n          {this.state.player === \"playing\" || this.state.player === \"paused\" ? (\r\n            <button onClick={() => this.setState({ player: \"stopped\" })}>\r\n              Stop\r\n            </button>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n        {this.state.player === \"playing\" || this.state.player === \"paused\" ? (\r\n          <div>\r\n            {currentTime} / {duration}\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <audio ref={ref => (this.player = ref)} />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n*/}\r\n\r\nclass Musicplayer extends Component{\r\n  handleclick(e){\r\n    <audio ref={ref => (e.player = ref)} />\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"player\">\r\n      <button onClick = {this.handleclick}>Click me\r\n      </button>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Musicplayer;\r\n"]},"metadata":{},"sourceType":"module"}